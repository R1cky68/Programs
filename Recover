#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
typedef uint8_t BYTE;

int main(int argc, char *argv[])
{

  // Ensures used properly, looks good
  if (argc != 2)
  {
    printf("Usage: ./recover filename \n");
    return 1;

  }

//TODO: Open memory card
FILE *file = fopen(argv[1], "r"); // looks good, file is input file

 // Checks to see whether pointer is not a NULL value, avoids segmentation fault (looks good)
 if (file == NULL)
 {
    printf("File 1 is null \n");
    return 1;
 }

//TODO: Look for beginning of a jpeg
unsigned char buffer[512];
int counter = 0;
FILE *file2 = NULL; // didn't know I had to do this
char *filename = malloc(8 * sizeof(char)); // was missing this, this is where you use malloc huh

//TODO: Read and write 512 bytes until a new jpeg is found, rmb jpegs start with header 0xff, 0xd8, 0xff, 0xe

  while(fread(buffer, sizeof(char), 512, file)) // weird how different it is from their syntax
    {
       if(buffer[0] == 0xff && buffer[1] == 0xd8 && buffer[2] == 0xff && (buffer[3] & 0xf0) == 0xe0) // looks fine
   {
        sprintf(filename, "%03i.jpg", 2);
        file2 = fopen(filename, "w"); // not sure what this is doing but is right, this is output file actually
        counter++;
   }

        if (file2 != NULL) // looks good
        {
          fwrite(buffer, sizeof(char), 512, file2); // move into it, don't want error message on file2 section, ig understand better
          return 0;
        }


    }

          free(filename);
          fclose(file2);
           fclose(file);

      return 0;

}
